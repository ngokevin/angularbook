title: Forms Russia with Love
category: chapter
slug: forms
chapter: 005

---

```form```, ```input```, ```select```, and ```textarea``` elements are
augmented (as directives) in Angular for added sauce. Angular forms have a
built-in awareness of their state, such as whether data has been inputted or
whether the forms are valid. Angular forms provide

- two-way data binding with the model.
- form state.

We have covered the two-way data binding in *AngularJS, Allonsy*. Form state,
however, can be used to conditionally

- enable or disable form controls (e.g. buttons).
- style the form.

With directives though, we can also achieve

- custom form validation.
- custom form controls.

## Form State

A bit about the backend. Angular forms and inputs are instances of
```FormController```. As instances of ```FormController```, form and input
directives contain a handful of useful properties that represent form state.

- ```$pristine```: True if the user has not yet interacted with the form
- ```$dirty```: opposite of ```$dirty```
- ```$valid```: True if all of containing forms and controls are valid
- ```$invalid```: opposite of ```$valid```
- ```$error```: a JS object referencing invalid forms or a mapping of error
  names to booleans

```$error``` is a bit confusing as it has two faces. If getting the ```$error```
attribute from a *form's* ```FormController```, it will be a reference to invalid
form controls.

    ::js
    {"required": [{}], "max": false}

Else if getting the ```$error``` attribute from an *input's*
```FormController```, it will be a mapping of error names to booleans (with
"true" indicating an error).


    ::js
    {"required": false, "max": true}

To reference all these properties though, the form and input directives need to
be given a ```name``` attribute to register it into scope. We can then use
these properties to drive form interaction and behavior.

### Example

In *Muffin Button*, we will create a button that dispenses a number of muffins
to demonstrate form states.

### Styling the Form Based on Form State

## Custom Form Validation

## Custom Form Controls
