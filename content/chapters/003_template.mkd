title: Templates, Window to the Soul
category: chapter
slug: templates
chapter: 003

---

Angular **templates** are an enhanced specification of HTML that, along with
information from the model, becomes the rendered view that the user sees in the
browser. Recall that the view, in the MVC pattern, generates the output
representation while requesting information from the model.

The templates were designed, through the use of directives, to be more
declarative for specifying UI. They are the standard, static DOM sprinkled with
various Angular elements that add behavior to make the view more dynamic and
more closely binded with the model.

Angular seasons several different types of spices on top of standard HTML.

- **Expressions** are evaluated JS-like code snippets placed in
  bindings.
- **Directives** augment existing DOM elements or represent a reusable
  component.
- **Form controls** allow the user to input and allow the application to
  validate data.
- **Filters** format or prettify data for display.

## Angular Expressions

Angular expressions are like inline JS snippets in the template,
though, following MVC, they are purposely limited in power. They are often
placed in bindings in the form of ```{{ expression }} ``` or in quotes for some
directives.

In previous chapters, we have already been using expressions to evaluate
properties against scopes and to specify event handlers. They can also evaluate
simple mathematical and logical expressions. Example expressions might be

- 1 + 1 * 42
- someScopeAttr
- someScopeAttr || someOtherScopeAttr
- someScopeMethod()

Expressions can also be separated by semicolons. A case where this would be
useful would be within the ```ng-init``` directive, where we could initialize
multiple properties on the scope.

### Angular Expressions vs. Javascript Expressions

Angular expressions are not simply ```eval()```ed JS expressions. Angular
expressions are like a subset of JS expressions. There are several notable
distinctions between the two.

- Angular evaluates attributes against the scope, whereas JS would evaluate
  against the global ```window```
- Angular errors and exceptions evaluate to ```undefined``` or ```null```,
  whereas JS would throw an exception.
- Angular contains no control flow constructs such as conditionals or loops,
  though conditionals can sometimes be mimicked using ternary operators.

### Example

In *NBA Mad Libs*, we will write a poem involving memes about NBA basketball
players, to demonstrate Angular expressions.

## Directives

Directives teach HTML new tricks and allows us to create reusable widgets.  We
will cover how to create custom directives in *Directives, Teaching an Old HTML
New Tricks*. In previous chapters, we have already been using basic built-in
Angular directives such as ```ng-app```, ```ng-controller```, or ```ng-
click```.

We will cover only a few out-of-the-box directives that are representative of
different types of directives, by purpose. The official Angular documentation
contains an API reference detailing all of the directives, totaling 50 or so at
time of writing.
