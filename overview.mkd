#AngularJS

AngularJS is *model-view-controller* (MVC) client-side Javascript application
framework that features two-way data binding and enhances HTML to be more
declarative and expressive. Unfortunately before we dive into some lovely
hello-worldish code, we need to get a few concepts out of the way.

##MVC

MVC is a development pattern (or paradigm, if you will) that revolves around a
separation of concerns. I will describe MVC and then apply its concepts to
AngularJS.

- The *model* holds the data and state.
- The *view* is what the user sees.
- The *controller* manipulates the model.

They connect together. The model powers everything in the background with data.
Data from the model is pushed to the view. The user's interactions with the
view are recognized by the controller to update the model. An analogy might
be a photographer holding a photoshoot with a supermodel.

- The supermodel's pose is the current state.
- The photographer views the supermodel through the camera lens.
- The photographer directs the supermodel to change poses.

AngularJS's development pattern is MVC. Though in AngularJS jargon, it is
employed as **scope-template-controller**. Worry not, these concepts will be
explained once you are ready, young padawan. Until these concepts are presented
properly, we will still refer to MVC components as model-view-controller.

##Two-Way Data Binding

Remember when I mentioned that the model's state is pushed to the view. You
should, as it was not too long ago. Well, AngularJS features two-way data
binding. Not only does changes to the model update the view, but interactions
with the view side implicitly update back to the model.

This is powerful. It permits us to write less middleman code between the model
and view. Instead we let the model and view go outside and play with each
other, no supervision needed. Referring to our earlier analogy, it would be as
if the photographer struck the same poses in sync with the supermodel.

This saves a lot of trouble. I was once writing an non-AngularJS web app that
had a large, ugly function that synced my model with my view. It took the
model and ran a big block of jQuery code. The block of code would look at the
model and update various parts of the page. Every time the user interacted with
the page, I had to call that expensive block of jQuery code. I was displeased
by this. Thus, I turned to AngularJS for its two-way data binding.

###Example

    ::html
    <input type="text" ng-model="species">

A toy example of two-way data binding can be presented with an HTML text input
element. As a sneak peek, I have included a snippet from the view. We have the
input binded to a model variable ```species```.  If ```species```'s value is
"time lord", the input box will read "time lord".

Say we type "dalek" into the input box.  ```species```'s value in the backend
will automatically update to "dalek". Since we have ```species``` under two-way
data binding, no ```onchange``` event handlers are required.
